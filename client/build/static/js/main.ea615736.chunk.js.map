{"version":3,"sources":["components/PostList.js","components/PostCreate.js","components/PostEdit.js","components/UserList.js","components/UserCreate.js","components/UserEdit.js","App.js","serviceWorker.js","index.js"],"names":["PostList","props","List","Datagrid","TextField","source","EmailField","DateField","EditButton","basePath","DeleteButton","PostCreate","Create","title","SimpleForm","TextInput","multiline","DateInput","label","PostEdit","Edit","disabled","UserList","UserCreate","UserEdit","App","Admin","dataProvider","restProvider","Resource","name","list","create","edit","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"6SA4BeA,EAhBE,SAACC,GAChB,OACE,kBAACC,EAAA,EAASD,EACR,kBAACE,EAAA,EAAD,KACE,kBAACC,EAAA,EAAD,CAAWC,OAAO,OAClB,kBAACD,EAAA,EAAD,CAAWC,OAAO,SAClB,kBAACC,EAAA,EAAD,CAAYD,OAAO,WACnB,kBAACD,EAAA,EAAD,CAAWC,OAAO,UAClB,kBAACE,EAAA,EAAD,CAAWF,OAAO,gBAClB,kBAACG,EAAA,EAAD,CAAYC,SAAS,WACrB,kBAACC,EAAA,EAAD,CAAcD,SAAS,c,oCCNhBE,EAbI,SAACV,GAClB,OACE,kBAACW,EAAA,EAAD,eAAQC,MAAM,iBAAoBZ,GAChC,kBAACa,EAAA,EAAD,KACE,kBAACC,EAAA,EAAD,CAAWV,OAAO,SAClB,kBAACU,EAAA,EAAD,CAAWV,OAAO,iBAClB,kBAACU,EAAA,EAAD,CAAWC,WAAS,EAACX,OAAO,UAC5B,kBAACY,EAAA,EAAD,CAAWC,MAAM,YAAYb,OAAO,mB,SCO7Bc,EAdE,SAAClB,GAChB,OACE,kBAACmB,EAAA,EAAD,eAAMP,MAAM,aAAgBZ,GAC1B,kBAACa,EAAA,EAAD,KACE,kBAACC,EAAA,EAAD,CAAWM,UAAQ,EAAChB,OAAO,OAC3B,kBAACU,EAAA,EAAD,CAAWV,OAAO,SAClB,kBAACU,EAAA,EAAD,CAAWV,OAAO,WAClB,kBAACU,EAAA,EAAD,CAAWV,OAAO,UAClB,kBAACY,EAAA,EAAD,CAAWC,MAAM,YAAYb,OAAO,mBCgB7BiB,EAhBE,SAACrB,GAChB,OACE,kBAACC,EAAA,EAASD,EACR,kBAACE,EAAA,EAAD,KACE,kBAACC,EAAA,EAAD,CAAWC,OAAO,OAClB,kBAACD,EAAA,EAAD,CAAWC,OAAO,SAClB,kBAACC,EAAA,EAAD,CAAYD,OAAO,iBACnB,kBAACD,EAAA,EAAD,CAAWC,OAAO,UAClB,kBAACE,EAAA,EAAD,CAAWF,OAAO,gBAClB,kBAACG,EAAA,EAAD,CAAYC,SAAS,WACrB,kBAACC,EAAA,EAAD,CAAcD,SAAS,cCLhBc,EAbI,SAACtB,GAClB,OACE,kBAACW,EAAA,EAAD,eAAQC,MAAM,iBAAoBZ,GAChC,kBAACa,EAAA,EAAD,KACE,kBAACC,EAAA,EAAD,CAAWV,OAAO,SAClB,kBAACU,EAAA,EAAD,CAAWV,OAAO,iBAClB,kBAACU,EAAA,EAAD,CAAWC,WAAS,EAAEX,OAAO,UAC7B,kBAACY,EAAA,EAAD,CAAWC,MAAM,YAAYb,OAAO,mBCO7BmB,EAdE,SAACvB,GAChB,OACE,kBAACmB,EAAA,EAAD,eAAMP,MAAM,aAAgBZ,GAC1B,kBAACa,EAAA,EAAD,KACE,kBAACC,EAAA,EAAD,CAAWM,UAAQ,EAAChB,OAAO,OAC3B,kBAACU,EAAA,EAAD,CAAWV,OAAO,SAClB,kBAACU,EAAA,EAAD,CAAWV,OAAO,WAClB,kBAACU,EAAA,EAAD,CAAWV,OAAO,UAClB,kBAACY,EAAA,EAAD,CAAWC,MAAM,YAAYb,OAAO,mBCkB7BoB,MAnBf,WACE,OACE,kBAACC,EAAA,EAAD,CAAOC,aAAcC,YAAa,0BAChC,kBAACC,EAAA,EAAD,CACEC,KAAK,QACLC,KAAM/B,EACNgC,OAAQrB,EACRsB,KAAMd,IAER,kBAACU,EAAA,EAAD,CACEC,KAAK,QACLC,KAAMT,EACNU,OAAQT,EACRU,KAAMT,MCXMU,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDyHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,c","file":"static/js/main.ea615736.chunk.js","sourcesContent":["import React from 'react'\r\nimport {\r\n  List,\r\n  Datagrid,\r\n  TextField,\r\n  DateField,\r\n  EditButton,\r\n  DeleteButton,\r\n  EmailField,\r\n  TextInput,\r\n} from 'react-admin'\r\n\r\nconst PostList = (props) => {\r\n  return (\r\n    <List {...props}>\r\n      <Datagrid>\r\n        <TextField source='id' />\r\n        <TextField source='name' />\r\n        <EmailField source='Number' />\r\n        <TextField source='text1' />\r\n        <DateField source='publishedAt' />   \r\n        <EditButton basePath='/posts' />\r\n        <DeleteButton basePath='/posts' />\r\n      </Datagrid>\r\n    </List>\r\n  )\r\n}\r\n\r\nexport default PostList\r\n","import React from 'react'\r\nimport { Create, SimpleForm, TextInput, DateInput, EmailField } from 'react-admin'\r\n\r\nconst PostCreate = (props) => {\r\n  return (\r\n    <Create title='Create a Post' {...props}>\r\n      <SimpleForm>\r\n        <TextInput source='name' />\r\n        <TextInput source='Phone number' />\r\n        <TextInput multiline source='text1' />\r\n        <DateInput label='Published' source='publishedAt' />  \r\n      </SimpleForm>\r\n    </Create>\r\n  )\r\n}\r\n\r\nexport default PostCreate\r\n","import React from 'react'\r\nimport { Edit, SimpleForm, TextInput, DateInput, EmailField } from 'react-admin'\r\n\r\nconst PostEdit = (props) => {\r\n  return (\r\n    <Edit title='Edit Post' {...props}>\r\n      <SimpleForm>\r\n        <TextInput disabled source='id' />\r\n        <TextInput source='name' />\r\n        <TextInput source='Number' />\r\n        <TextInput source='text1' />\r\n        <DateInput label='Published' source='publishedAt' />\r\n      </SimpleForm>\r\n    </Edit>\r\n  )\r\n}\r\n\r\nexport default PostEdit\r\n","import React from 'react'\r\nimport {\r\n  List,\r\n  Datagrid,\r\n  TextField,\r\n  EmailField,\r\n  EditButton,\r\n  DeleteButton,\r\n  DateField\r\n} from 'react-admin'\r\n\r\nconst UserList = (props) => {\r\n  return (\r\n    <List {...props}>\r\n      <Datagrid>\r\n        <TextField source='id' />\r\n        <TextField source='name' />\r\n        <EmailField source='Phone number' />\r\n        <TextField source='text1' />\r\n        <DateField source='publishedAt' /> \r\n        <EditButton basePath='/users' />\r\n        <DeleteButton basePath='/users' />\r\n      </Datagrid>\r\n    </List>\r\n  )\r\n}\r\n\r\nexport default UserList\r\n","import React from 'react'\r\nimport { Create, SimpleForm, TextInput,DateInput } from 'react-admin'\r\n\r\nconst UserCreate = (props) => {\r\n  return (\r\n    <Create title='Create a User' {...props}>\r\n      <SimpleForm>\r\n        <TextInput source='name' />\r\n        <TextInput source='Phone number' />\r\n        <TextInput multiline  source='text1' />\r\n        <DateInput label='Published' source='publishedAt' />\r\n      </SimpleForm>\r\n    </Create>\r\n  )\r\n}\r\n\r\nexport default UserCreate\r\n","import React from 'react'\r\nimport { Edit, SimpleForm, TextInput,DateInput } from 'react-admin'\r\n\r\nconst UserEdit = (props) => {\r\n  return (\r\n    <Edit title='Edit User' {...props}>\r\n      <SimpleForm>\r\n        <TextInput disabled source='id' />\r\n        <TextInput source='name' />\r\n        <TextInput source='number' />\r\n        <TextInput source='text1' />\r\n        <DateInput label='Published' source='publishedAt' />\r\n      </SimpleForm>\r\n    </Edit>\r\n  )\r\n}\r\n\r\nexport default UserEdit\r\n","import React from 'react'\r\nimport { Admin, Resource } from 'react-admin'\r\nimport restProvider from 'ra-data-simple-rest'\r\nimport PostList from './components/PostList'\r\nimport PostCreate from './components/PostCreate'\r\nimport PostEdit from './components/PostEdit'\r\nimport UserList from './components/UserList'\r\nimport UserCreate from './components/UserCreate'\r\nimport UserEdit from './components/UserEdit'\r\n\r\nfunction App() {\r\n  return (\r\n    <Admin dataProvider={restProvider('http://localhost:3000')}>\r\n      <Resource\r\n        name='posts'\r\n        list={PostList}\r\n        create={PostCreate}\r\n        edit={PostEdit}\r\n      />\r\n      <Resource\r\n        name='users'\r\n        list={UserList}\r\n        create={UserCreate}\r\n        edit={UserEdit}\r\n      />\r\n    </Admin>\r\n  )\r\n}\r\n\r\nexport default App\r\n","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.0/8 are considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl, {\r\n    headers: { 'Service-Worker': 'script' },\r\n  })\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready\r\n      .then(registration => {\r\n        registration.unregister();\r\n      })\r\n      .catch(error => {\r\n        console.error(error.message);\r\n      });\r\n  }\r\n}\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\nimport * as serviceWorker from './serviceWorker';\r\n\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n    <App />\r\n  </React.StrictMode>,\r\n  document.getElementById('root')\r\n);\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}